options {
    STATIC = false;
    MULTI = true;
    KEEP_LINE_COLUMN = true;
}

PARSER_BEGIN(Knit)
package dev.ryanramsdell.jjtree;

import dev.ryanramsdell.data.KnittingPattern;import dev.ryanramsdell.data.StitchType;public class Knit {
    public static void main(String[] args) throws ParseException {
        Knit parser = new Knit(System.in);
        parser.Start();
    }
}
PARSER_END(Knit)

SKIP : { " " }
SKIP : { "\n" | "\r" | "\r\n" }
TOKEN : { < NUMBER : (["0"-"9"])+ > }
TOKEN : { < CAST_ON : "cast on" | "co" | "caston">}
TOKEN : { < KNIT : "knit" | "k" >}
TOKEN : { < KNITWISE : <KNIT> | "knitwise" >}
TOKEN : { < PURL : "purl" | "p" >}
TOKEN : { < PURLWISE : <PURL> | "purlwise" >}
TOKEN : { < TOG : "together" | "tog" > }
//TOKEN : { < CABLE : "cable" | "c" > }
TOKEN : { < MAKE : "make" | "m" > }
TOKEN : { < LEFT : "left" | "l" > }
TOKEN : { < RIGHT : "right" | "r" > }
TOKEN : { < OPEN_PAR : "(" > }
TOKEN : { < CLOSE_PAR : ")" > }

SimpleNode Start() :
{
    KnittingPattern pattern;
    Token castOn;
}
{
    {System.out.println("Running Parser...");}
    (Exp() ) *
    <EOF>
    {
        System.out.println("Done parsing");
        return jjtThis;
    }

}

void Exp() #void : {}
{
    Repeat() | LOOKAHEAD((<KNIT>|<PURL>)<NUMBER><TOG>) Decrease() | Increase() | Stitch()
}

void Repeat() :
{
    Token num;
}
{
    <OPEN_PAR> (Exp()) * <CLOSE_PAR>num=<NUMBER>
    {
        int n = Integer.parseInt(num.image);
        jjtThis.setNum(n);
    }
}

void Stitch() :
{
    Token stitchType;
    Token num = null;
}
{
    (stitchType = <CAST_ON> | stitchType = <KNIT> | stitchType = <PURL>)
    [num = <NUMBER>]
    {
        int n = num != null ? Integer.parseInt(num.image) : 1;
        switch (stitchType.kind) {
            case CAST_ON:
                jjtThis.setType(StitchType.CAST_ON);
                break;
            case KNIT:
                jjtThis.setType(StitchType.KNIT);
                break;
            case PURL:
                jjtThis.setType(StitchType.PURL);
                break;
        }
        jjtThis.setNum(n);
    }
}

void Decrease() :
{
    Token stitchType;
    Token count;
}
{
    (stitchType = <KNIT> | stitchType = <PURL> )
    count = <NUMBER>
    <TOG>
    {
        int c = Integer.parseInt(count.image);
        jjtThis.setNum(c);
        switch(stitchType.kind) {
            case KNIT:
                jjtThis.setType(StitchType.KNIT);
                break;
            case PURL:
                jjtThis.setType(StitchType.PURL);
                break;
        }
    }
}

void Increase() :
{
    Token stitchType = null;
    Token count;
    Token lean;
}
{
    <MAKE>
    count = <NUMBER>
    [(stitchType = <KNITWISE> | stitchType = <PURLWISE>)]
    [lean = <LEFT> | <RIGHT> ]
    {
        int c = Integer.parseInt(count.image);
        jjtThis.setNum(c);
        if(stitchType != null && stitchType.kind == PURLWISE) {
            jjtThis.setType(StitchType.PURL);
        }
        else {
            jjtThis.setType(StitchType.KNIT);
        }
    }
}

